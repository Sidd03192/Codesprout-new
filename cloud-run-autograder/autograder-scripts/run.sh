#!/bin/bash
# Cloud Run optimized autograder script
# We do NOT use 'set -e' here because we want to manually handle the exit code
# of the test command to provide better error feedback.

echo "INFO: Cloud Run Autograder script started."

# Define a default package structure for robustness
PACKAGE_DIR="src/main/java/com/autograder"
TEST_PACKAGE_DIR="src/test/java/com/autograder"

# --- Project Setup Logic ---
# Check if a pom.xml was provided by the teacher (full project upload)
if [ -f "tests/pom.xml" ]; then
    echo "INFO: Full project structure detected. Using provided pom.xml."
    cp -r tests/* .
else
    echo "INFO: Single test file detected. Creating minimal Maven project structure..."
    
    # 1. Create the necessary directory structure with packages
    mkdir -p $PACKAGE_DIR
    mkdir -p $TEST_PACKAGE_DIR

    # 2. Find the teacher's single .java test file
    TEACHER_TEST_FILE=$(find tests -name '*.java' | head -1)
    if [ -z "$TEACHER_TEST_FILE" ]; then
        echo "ERROR: No .java test file found in the tests directory." >&2
        echo '{ "error": "No .java test file was provided by the teacher." }' > results/results.json
        exit 0
    fi
    
    # 3. Add the package declaration to the test file and move it
    echo "INFO: Modifying and moving teacher's test file..."
    sed -i '1s/^/package com.autograder;\n/' "$TEACHER_TEST_FILE"
    mv "$TEACHER_TEST_FILE" $TEST_PACKAGE_DIR/

    # 4. Create a streamlined pom.xml file for faster builds
    cat > pom.xml <<- EOM
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>autograder-test</artifactId>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.showWarnings>false</maven.compiler.showWarnings>
        <maven.compiler.showDeprecation>false</maven.compiler.showDeprecation>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <showWarnings>false</showWarnings>
                    <showDeprecation>false</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <configuration>
                    <redirectTestOutputToFile>false</redirectTestOutputToFile>
                    <printSummary>false</printSummary>
                    <trimStackTrace>false</trimStackTrace>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
EOM
fi

# --- Place Student Code ---
echo "INFO: Modifying and placing student's code..."
# Add the package declaration to the student's code file
sed -i '1s/^/package com.autograder;\n/' source/Solution.java
# Move the modified file to the correct package directory
cp source/Solution.java $PACKAGE_DIR/

# --- Run Tests ---
echo "INFO: Compiling and running tests with Maven (optimized)..."
# Use offline mode and quiet for faster execution
# Dependencies are pre-cached in Docker image
mvn test -o -q -Dmaven.test.failure.ignore=true > results/raw_output.log 2>&1 || true

# --- Translate Results ---
# Find the XML report generated by JUnit.
# Use a more portable approach that works on all Linux systems
LATEST_REPORT=$(find target/surefire-reports -name '*.xml' -type f 2>/dev/null | head -1)

# Check if the report file was created. If not, compilation failed.
if [ -z "$LATEST_REPORT" ] || [ ! -f "$LATEST_REPORT" ]; then
    echo "ERROR: Could not find JUnit XML report. Compilation or tests likely failed." >&2
    # Create a results.json with an error message.
    echo '{ "error": "Code failed to compile or tests could not run. Check raw_output.log for details." }' > results/results.json
    exit 0 # Exit gracefully. The error is in the JSON.
fi

echo "INFO: Translating JUnit XML report into standard results.json..."
SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
python3 "$SCRIPT_DIR/translate_results.py" "$LATEST_REPORT" results/results.json

echo "INFO: Cloud Run grading complete."